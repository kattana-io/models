// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: apiTrades.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeSize int32

const (
	TradeSize_ALL_SIZE TradeSize = 0
	TradeSize_SHRIMP   TradeSize = 1
	TradeSize_FISH     TradeSize = 2
	TradeSize_SHARK    TradeSize = 3
	TradeSize_WHALE    TradeSize = 4
)

// Enum value maps for TradeSize.
var (
	TradeSize_name = map[int32]string{
		0: "ALL_SIZE",
		1: "SHRIMP",
		2: "FISH",
		3: "SHARK",
		4: "WHALE",
	}
	TradeSize_value = map[string]int32{
		"ALL_SIZE": 0,
		"SHRIMP":   1,
		"FISH":     2,
		"SHARK":    3,
		"WHALE":    4,
	}
)

func (x TradeSize) Enum() *TradeSize {
	p := new(TradeSize)
	*p = x
	return p
}

func (x TradeSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeSize) Descriptor() protoreflect.EnumDescriptor {
	return file_apiTrades_proto_enumTypes[0].Descriptor()
}

func (TradeSize) Type() protoreflect.EnumType {
	return &file_apiTrades_proto_enumTypes[0]
}

func (x TradeSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeSize.Descriptor instead.
func (TradeSize) EnumDescriptor() ([]byte, []int) {
	return file_apiTrades_proto_rawDescGZIP(), []int{0}
}

type ApiTradesBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trades []*ApiTrade `protobuf:"bytes,1,rep,name=Trades,proto3" json:"Trades,omitempty"`
}

func (x *ApiTradesBlock) Reset() {
	*x = ApiTradesBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiTrades_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTradesBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTradesBlock) ProtoMessage() {}

func (x *ApiTradesBlock) ProtoReflect() protoreflect.Message {
	mi := &file_apiTrades_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTradesBlock.ProtoReflect.Descriptor instead.
func (*ApiTradesBlock) Descriptor() ([]byte, []int) {
	return file_apiTrades_proto_rawDescGZIP(), []int{0}
}

func (x *ApiTradesBlock) GetTrades() []*ApiTrade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type ApiTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx               string  `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Date             int64   `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Timestamp        int64   `protobuf:"varint,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Chain            string  `protobuf:"bytes,4,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Blocknumber      uint64  `protobuf:"varint,5,opt,name=Blocknumber,proto3" json:"Blocknumber,omitempty"`
	Pair             string  `protobuf:"bytes,6,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Amount0          string  `protobuf:"bytes,7,opt,name=Amount0,proto3" json:"Amount0,omitempty"`
	Amount1          string  `protobuf:"bytes,8,opt,name=Amount1,proto3" json:"Amount1,omitempty"`
	Buy              bool    `protobuf:"varint,9,opt,name=Buy,proto3" json:"Buy,omitempty"`
	PriceA           float32 `protobuf:"fixed32,10,opt,name=PriceA,proto3" json:"PriceA,omitempty"`
	PriceAUSD        float32 `protobuf:"fixed32,11,opt,name=PriceAUSD,proto3" json:"PriceAUSD,omitempty"`
	PriceB           float32 `protobuf:"fixed32,12,opt,name=PriceB,proto3" json:"PriceB,omitempty"`
	PriceBUSD        float32 `protobuf:"fixed32,13,opt,name=PriceBUSD,proto3" json:"PriceBUSD,omitempty"`
	Bot              bool    `protobuf:"varint,14,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Wallet           string  `protobuf:"bytes,15,opt,name=Wallet,proto3" json:"Wallet,omitempty"`
	Order            int32   `protobuf:"varint,16,opt,name=Order,proto3" json:"Order,omitempty"`
	ValueUsd         float32 `protobuf:"fixed32,17,opt,name=ValueUsd,proto3" json:"ValueUsd,omitempty"`
	Ticker           uint64  `protobuf:"varint,18,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
	IsProxyTrade     bool    `protobuf:"varint,19,opt,name=IsProxyTrade,proto3" json:"IsProxyTrade,omitempty"`
	TotalTradesCount uint32  `protobuf:"varint,20,opt,name=TotalTradesCount,proto3" json:"TotalTradesCount,omitempty"`
	PairTradesCount  uint32  `protobuf:"varint,21,opt,name=PairTradesCount,proto3" json:"PairTradesCount,omitempty"`
}

func (x *ApiTrade) Reset() {
	*x = ApiTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiTrades_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiTrade) ProtoMessage() {}

func (x *ApiTrade) ProtoReflect() protoreflect.Message {
	mi := &file_apiTrades_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiTrade.ProtoReflect.Descriptor instead.
func (*ApiTrade) Descriptor() ([]byte, []int) {
	return file_apiTrades_proto_rawDescGZIP(), []int{1}
}

func (x *ApiTrade) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *ApiTrade) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ApiTrade) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ApiTrade) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *ApiTrade) GetBlocknumber() uint64 {
	if x != nil {
		return x.Blocknumber
	}
	return 0
}

func (x *ApiTrade) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *ApiTrade) GetAmount0() string {
	if x != nil {
		return x.Amount0
	}
	return ""
}

func (x *ApiTrade) GetAmount1() string {
	if x != nil {
		return x.Amount1
	}
	return ""
}

func (x *ApiTrade) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

func (x *ApiTrade) GetPriceA() float32 {
	if x != nil {
		return x.PriceA
	}
	return 0
}

func (x *ApiTrade) GetPriceAUSD() float32 {
	if x != nil {
		return x.PriceAUSD
	}
	return 0
}

func (x *ApiTrade) GetPriceB() float32 {
	if x != nil {
		return x.PriceB
	}
	return 0
}

func (x *ApiTrade) GetPriceBUSD() float32 {
	if x != nil {
		return x.PriceBUSD
	}
	return 0
}

func (x *ApiTrade) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *ApiTrade) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *ApiTrade) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ApiTrade) GetValueUsd() float32 {
	if x != nil {
		return x.ValueUsd
	}
	return 0
}

func (x *ApiTrade) GetTicker() uint64 {
	if x != nil {
		return x.Ticker
	}
	return 0
}

func (x *ApiTrade) GetIsProxyTrade() bool {
	if x != nil {
		return x.IsProxyTrade
	}
	return false
}

func (x *ApiTrade) GetTotalTradesCount() uint32 {
	if x != nil {
		return x.TotalTradesCount
	}
	return 0
}

func (x *ApiTrade) GetPairTradesCount() uint32 {
	if x != nil {
		return x.PairTradesCount
	}
	return 0
}

type TradeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PriceMin      float32   `protobuf:"fixed32,1,opt,name=PriceMin,proto3" json:"PriceMin,omitempty"`
	PriceMax      float32   `protobuf:"fixed32,2,opt,name=PriceMax,proto3" json:"PriceMax,omitempty"`
	PriceUSDMin   float32   `protobuf:"fixed32,3,opt,name=PriceUSDMin,proto3" json:"PriceUSDMin,omitempty"`
	PriceUSDMax   float32   `protobuf:"fixed32,4,opt,name=PriceUSDMax,proto3" json:"PriceUSDMax,omitempty"`
	VolumeMin     float32   `protobuf:"fixed32,5,opt,name=VolumeMin,proto3" json:"VolumeMin,omitempty"`
	VolumeMax     float32   `protobuf:"fixed32,6,opt,name=VolumeMax,proto3" json:"VolumeMax,omitempty"`
	VolumeSellMin float32   `protobuf:"fixed32,7,opt,name=VolumeSellMin,proto3" json:"VolumeSellMin,omitempty"`
	VolumeSellMfx float32   `protobuf:"fixed32,8,opt,name=VolumeSellMfx,proto3" json:"VolumeSellMfx,omitempty"`
	BaseMin       float32   `protobuf:"fixed32,9,opt,name=BaseMin,proto3" json:"BaseMin,omitempty"`
	BaseMax       float32   `protobuf:"fixed32,10,opt,name=BaseMax,proto3" json:"BaseMax,omitempty"`
	QuoteMin      float32   `protobuf:"fixed32,11,opt,name=QuoteMin,proto3" json:"QuoteMin,omitempty"`
	QuoteMax      float32   `protobuf:"fixed32,12,opt,name=QuoteMax,proto3" json:"QuoteMax,omitempty"`
	Wallet        string    `protobuf:"bytes,13,opt,name=Wallet,proto3" json:"Wallet,omitempty"`
	Buy           bool      `protobuf:"varint,14,opt,name=Buy,proto3" json:"Buy,omitempty"`
	Sell          bool      `protobuf:"varint,15,opt,name=Sell,proto3" json:"Sell,omitempty"`
	Add           bool      `protobuf:"varint,16,opt,name=Add,proto3" json:"Add,omitempty"`
	Del           bool      `protobuf:"varint,17,opt,name=Del,proto3" json:"Del,omitempty"`
	Size          TradeSize `protobuf:"varint,18,opt,name=Size,proto3,enum=binary.TradeSize" json:"Size,omitempty"`
}

func (x *TradeFilter) Reset() {
	*x = TradeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apiTrades_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeFilter) ProtoMessage() {}

func (x *TradeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_apiTrades_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeFilter.ProtoReflect.Descriptor instead.
func (*TradeFilter) Descriptor() ([]byte, []int) {
	return file_apiTrades_proto_rawDescGZIP(), []int{2}
}

func (x *TradeFilter) GetPriceMin() float32 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *TradeFilter) GetPriceMax() float32 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *TradeFilter) GetPriceUSDMin() float32 {
	if x != nil {
		return x.PriceUSDMin
	}
	return 0
}

func (x *TradeFilter) GetPriceUSDMax() float32 {
	if x != nil {
		return x.PriceUSDMax
	}
	return 0
}

func (x *TradeFilter) GetVolumeMin() float32 {
	if x != nil {
		return x.VolumeMin
	}
	return 0
}

func (x *TradeFilter) GetVolumeMax() float32 {
	if x != nil {
		return x.VolumeMax
	}
	return 0
}

func (x *TradeFilter) GetVolumeSellMin() float32 {
	if x != nil {
		return x.VolumeSellMin
	}
	return 0
}

func (x *TradeFilter) GetVolumeSellMfx() float32 {
	if x != nil {
		return x.VolumeSellMfx
	}
	return 0
}

func (x *TradeFilter) GetBaseMin() float32 {
	if x != nil {
		return x.BaseMin
	}
	return 0
}

func (x *TradeFilter) GetBaseMax() float32 {
	if x != nil {
		return x.BaseMax
	}
	return 0
}

func (x *TradeFilter) GetQuoteMin() float32 {
	if x != nil {
		return x.QuoteMin
	}
	return 0
}

func (x *TradeFilter) GetQuoteMax() float32 {
	if x != nil {
		return x.QuoteMax
	}
	return 0
}

func (x *TradeFilter) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *TradeFilter) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

func (x *TradeFilter) GetSell() bool {
	if x != nil {
		return x.Sell
	}
	return false
}

func (x *TradeFilter) GetAdd() bool {
	if x != nil {
		return x.Add
	}
	return false
}

func (x *TradeFilter) GetDel() bool {
	if x != nil {
		return x.Del
	}
	return false
}

func (x *TradeFilter) GetSize() TradeSize {
	if x != nil {
		return x.Size
	}
	return TradeSize_ALL_SIZE
}

var File_apiTrades_proto protoreflect.FileDescriptor

var file_apiTrades_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x0e, 0x41, 0x70, 0x69,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x2e, 0x41, 0x70, 0x69, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xb8, 0x04, 0x0a, 0x08, 0x41, 0x70, 0x69, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x61, 0x69, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x55, 0x53,
	0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x55,
	0x53, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x42, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x73,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x86, 0x04, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x53, 0x44, 0x4d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x53, 0x44, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x53, 0x44, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x4d, 0x66, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x65, 0x6c,
	0x6c, 0x4d, 0x66, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x4d, 0x61, 0x78,
	0x12, 0x16, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65,
	0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x64, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x64, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x44, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x44,
	0x65, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x2a, 0x45, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x49,
	0x5a, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x52, 0x49, 0x4d, 0x50, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x53, 0x48, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48,
	0x41, 0x52, 0x4b, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x41, 0x4c, 0x45, 0x10, 0x04,
	0x42, 0x12, 0x5a, 0x10, 0x2f, 0x70, 0x6b, 0x67, 0x2d, 0x62, 0x69, 0x6e, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apiTrades_proto_rawDescOnce sync.Once
	file_apiTrades_proto_rawDescData = file_apiTrades_proto_rawDesc
)

func file_apiTrades_proto_rawDescGZIP() []byte {
	file_apiTrades_proto_rawDescOnce.Do(func() {
		file_apiTrades_proto_rawDescData = protoimpl.X.CompressGZIP(file_apiTrades_proto_rawDescData)
	})
	return file_apiTrades_proto_rawDescData
}

var file_apiTrades_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_apiTrades_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_apiTrades_proto_goTypes = []interface{}{
	(TradeSize)(0),         // 0: binary.TradeSize
	(*ApiTradesBlock)(nil), // 1: binary.ApiTradesBlock
	(*ApiTrade)(nil),       // 2: binary.ApiTrade
	(*TradeFilter)(nil),    // 3: binary.TradeFilter
}
var file_apiTrades_proto_depIdxs = []int32{
	2, // 0: binary.ApiTradesBlock.Trades:type_name -> binary.ApiTrade
	0, // 1: binary.TradeFilter.Size:type_name -> binary.TradeSize
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_apiTrades_proto_init() }
func file_apiTrades_proto_init() {
	if File_apiTrades_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_apiTrades_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTradesBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiTrades_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apiTrades_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apiTrades_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_apiTrades_proto_goTypes,
		DependencyIndexes: file_apiTrades_proto_depIdxs,
		EnumInfos:         file_apiTrades_proto_enumTypes,
		MessageInfos:      file_apiTrades_proto_msgTypes,
	}.Build()
	File_apiTrades_proto = out.File
	file_apiTrades_proto_rawDesc = nil
	file_apiTrades_proto_goTypes = nil
	file_apiTrades_proto_depIdxs = nil
}
