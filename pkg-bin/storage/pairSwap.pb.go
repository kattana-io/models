// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: pairSwap.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PairSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx               string `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Date             int64  `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Chain            string `protobuf:"bytes,3,opt,name=Chain,proto3" json:"Chain,omitempty"`
	BlockNumber      uint64 `protobuf:"varint,4,opt,name=BlockNumber,proto3" json:"BlockNumber,omitempty"`
	Pair             string `protobuf:"bytes,5,opt,name=Pair,proto3" json:"Pair,omitempty"`
	Amount0          []byte `protobuf:"bytes,6,opt,name=Amount0,proto3" json:"Amount0,omitempty"`
	Amount1          []byte `protobuf:"bytes,7,opt,name=Amount1,proto3" json:"Amount1,omitempty"`
	Buy              bool   `protobuf:"varint,8,opt,name=Buy,proto3" json:"Buy,omitempty"`
	PriceA           string `protobuf:"bytes,9,opt,name=PriceA,proto3" json:"PriceA,omitempty"`
	PriceAUSD        string `protobuf:"bytes,10,opt,name=PriceAUSD,proto3" json:"PriceAUSD,omitempty"`
	PriceB           string `protobuf:"bytes,11,opt,name=PriceB,proto3" json:"PriceB,omitempty"`
	PriceBUSD        string `protobuf:"bytes,12,opt,name=PriceBUSD,proto3" json:"PriceBUSD,omitempty"`
	Bot              bool   `protobuf:"varint,13,opt,name=Bot,proto3" json:"Bot,omitempty"`
	Wallet           string `protobuf:"bytes,14,opt,name=Wallet,proto3" json:"Wallet,omitempty"`
	Order            uint32 `protobuf:"varint,15,opt,name=Order,proto3" json:"Order,omitempty"`
	ValueUSD         string `protobuf:"bytes,16,opt,name=ValueUSD,proto3" json:"ValueUSD,omitempty"`
	TotalTradesCount uint32 `protobuf:"varint,17,opt,name=TotalTradesCount,proto3" json:"TotalTradesCount,omitempty"`
	PairTradesCount  uint32 `protobuf:"varint,18,opt,name=PairTradesCount,proto3" json:"PairTradesCount,omitempty"`
	// mint/ burn or trade
	Klass string `protobuf:"bytes,19,opt,name=Klass,proto3" json:"Klass,omitempty"`
	// Sync
	Reserve0 string `protobuf:"bytes,20,opt,name=Reserve0,proto3" json:"Reserve0,omitempty"`
	Reserve1 string `protobuf:"bytes,21,opt,name=Reserve1,proto3" json:"Reserve1,omitempty"`
	// Reserves value in USD
	ReserveUSD string `protobuf:"bytes,22,opt,name=ReserveUSD,proto3" json:"ReserveUSD,omitempty"`
	ValidTill  int64  `protobuf:"varint,23,opt,name=ValidTill,proto3" json:"ValidTill,omitempty"`
}

func (x *PairSwap) Reset() {
	*x = PairSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pairSwap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PairSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PairSwap) ProtoMessage() {}

func (x *PairSwap) ProtoReflect() protoreflect.Message {
	mi := &file_pairSwap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PairSwap.ProtoReflect.Descriptor instead.
func (*PairSwap) Descriptor() ([]byte, []int) {
	return file_pairSwap_proto_rawDescGZIP(), []int{0}
}

func (x *PairSwap) GetTx() string {
	if x != nil {
		return x.Tx
	}
	return ""
}

func (x *PairSwap) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *PairSwap) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *PairSwap) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *PairSwap) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *PairSwap) GetAmount0() []byte {
	if x != nil {
		return x.Amount0
	}
	return nil
}

func (x *PairSwap) GetAmount1() []byte {
	if x != nil {
		return x.Amount1
	}
	return nil
}

func (x *PairSwap) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

func (x *PairSwap) GetPriceA() string {
	if x != nil {
		return x.PriceA
	}
	return ""
}

func (x *PairSwap) GetPriceAUSD() string {
	if x != nil {
		return x.PriceAUSD
	}
	return ""
}

func (x *PairSwap) GetPriceB() string {
	if x != nil {
		return x.PriceB
	}
	return ""
}

func (x *PairSwap) GetPriceBUSD() string {
	if x != nil {
		return x.PriceBUSD
	}
	return ""
}

func (x *PairSwap) GetBot() bool {
	if x != nil {
		return x.Bot
	}
	return false
}

func (x *PairSwap) GetWallet() string {
	if x != nil {
		return x.Wallet
	}
	return ""
}

func (x *PairSwap) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *PairSwap) GetValueUSD() string {
	if x != nil {
		return x.ValueUSD
	}
	return ""
}

func (x *PairSwap) GetTotalTradesCount() uint32 {
	if x != nil {
		return x.TotalTradesCount
	}
	return 0
}

func (x *PairSwap) GetPairTradesCount() uint32 {
	if x != nil {
		return x.PairTradesCount
	}
	return 0
}

func (x *PairSwap) GetKlass() string {
	if x != nil {
		return x.Klass
	}
	return ""
}

func (x *PairSwap) GetReserve0() string {
	if x != nil {
		return x.Reserve0
	}
	return ""
}

func (x *PairSwap) GetReserve1() string {
	if x != nil {
		return x.Reserve1
	}
	return ""
}

func (x *PairSwap) GetReserveUSD() string {
	if x != nil {
		return x.ReserveUSD
	}
	return ""
}

func (x *PairSwap) GetValidTill() int64 {
	if x != nil {
		return x.ValidTill
	}
	return 0
}

var File_pairSwap_proto protoreflect.FileDescriptor

var file_pairSwap_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x61, 0x69, 0x72, 0x53, 0x77, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xea, 0x04, 0x0a, 0x08, 0x50, 0x61, 0x69,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x30, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x75, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x41, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x55, 0x53, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x55, 0x53, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x42, 0x6f, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x42, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x53, 0x44, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x53, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x69, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x6c, 0x61,
	0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x55, 0x53, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x55, 0x53, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x54, 0x69, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x54, 0x69, 0x6c, 0x6c, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x70, 0x6b, 0x67, 0x2d, 0x62, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pairSwap_proto_rawDescOnce sync.Once
	file_pairSwap_proto_rawDescData = file_pairSwap_proto_rawDesc
)

func file_pairSwap_proto_rawDescGZIP() []byte {
	file_pairSwap_proto_rawDescOnce.Do(func() {
		file_pairSwap_proto_rawDescData = protoimpl.X.CompressGZIP(file_pairSwap_proto_rawDescData)
	})
	return file_pairSwap_proto_rawDescData
}

var file_pairSwap_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pairSwap_proto_goTypes = []interface{}{
	(*PairSwap)(nil), // 0: binary.PairSwap
}
var file_pairSwap_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pairSwap_proto_init() }
func file_pairSwap_proto_init() {
	if File_pairSwap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pairSwap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PairSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pairSwap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pairSwap_proto_goTypes,
		DependencyIndexes: file_pairSwap_proto_depIdxs,
		MessageInfos:      file_pairSwap_proto_msgTypes,
	}.Build()
	File_pairSwap_proto = out.File
	file_pairSwap_proto_rawDesc = nil
	file_pairSwap_proto_goTypes = nil
	file_pairSwap_proto_depIdxs = nil
}
