// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: pair.proto

package storage

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	FullName      string `protobuf:"bytes,3,opt,name=FullName,proto3" json:"FullName,omitempty"`
	Chain         string `protobuf:"bytes,4,opt,name=Chain,proto3" json:"Chain,omitempty"`
	Exchange      string `protobuf:"bytes,5,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	Address       string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	BaseAddress   string `protobuf:"bytes,7,opt,name=BaseAddress,proto3" json:"BaseAddress,omitempty"`
	BaseDecimals  int32  `protobuf:"varint,8,opt,name=BaseDecimals,proto3" json:"BaseDecimals,omitempty"`
	QuoteAddress  string `protobuf:"bytes,9,opt,name=QuoteAddress,proto3" json:"QuoteAddress,omitempty"`
	QuoteDecimals int32  `protobuf:"varint,10,opt,name=QuoteDecimals,proto3" json:"QuoteDecimals,omitempty"`
	Hidden        bool   `protobuf:"varint,11,opt,name=Hidden,proto3" json:"Hidden,omitempty"`
	Hot           bool   `protobuf:"varint,12,opt,name=Hot,proto3" json:"Hot,omitempty"`
	Flipped       bool   `protobuf:"varint,13,opt,name=Flipped,proto3" json:"Flipped,omitempty"`
	Rank          int32  `protobuf:"varint,14,opt,name=Rank,proto3" json:"Rank,omitempty"`
	Kind          int32  `protobuf:"varint,15,opt,name=Kind,proto3" json:"Kind,omitempty"`
	PoolCreated   int64  `protobuf:"varint,16,opt,name=PoolCreated,proto3" json:"PoolCreated,omitempty"`
	BaseId        uint32 `protobuf:"varint,17,opt,name=BaseId,proto3" json:"BaseId,omitempty"`
	QuoteId       uint32 `protobuf:"varint,18,opt,name=QuoteId,proto3" json:"QuoteId,omitempty"`
	// there are no columns in DB (OpenSearch only)
	PriceA       float64 `protobuf:"fixed64,19,opt,name=PriceA,proto3" json:"PriceA,omitempty"`
	PriceAUSD    float64 `protobuf:"fixed64,20,opt,name=PriceAUSD,proto3" json:"PriceAUSD,omitempty"`
	PriceB       float64 `protobuf:"fixed64,21,opt,name=PriceB,proto3" json:"PriceB,omitempty"`
	PriceBUSD    float64 `protobuf:"fixed64,22,opt,name=PriceBUSD,proto3" json:"PriceBUSD,omitempty"`
	Liquidity    float64 `protobuf:"fixed64,23,opt,name=Liquidity,proto3" json:"Liquidity,omitempty"`
	Volume       float64 `protobuf:"fixed64,24,opt,name=Volume,proto3" json:"Volume,omitempty"`
	BaseReserve  int64   `protobuf:"varint,25,opt,name=BaseReserve,proto3" json:"BaseReserve,omitempty"`
	QuoteReserve int64   `protobuf:"varint,26,opt,name=QuoteReserve,proto3" json:"QuoteReserve,omitempty"`
	UpdatedAt    int64   `protobuf:"varint,27,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	APY          float64 `protobuf:"fixed64,28,opt,name=APY,proto3" json:"APY,omitempty"`
	BaseSlug     string  `protobuf:"bytes,29,opt,name=BaseSlug,proto3" json:"BaseSlug,omitempty"`
	QuoteSlug    string  `protobuf:"bytes,30,opt,name=QuoteSlug,proto3" json:"QuoteSlug,omitempty"`
	Order        int32   `protobuf:"varint,31,opt,name=Order,proto3" json:"Order,omitempty"`
	ChangeA      float64 `protobuf:"fixed64,32,opt,name=ChangeA,proto3" json:"ChangeA,omitempty"`
	ChangeAUSD   float64 `protobuf:"fixed64,33,opt,name=ChangeAUSD,proto3" json:"ChangeAUSD,omitempty"`
	ChangeB      float64 `protobuf:"fixed64,34,opt,name=ChangeB,proto3" json:"ChangeB,omitempty"`
	ChangeBUSD   float64 `protobuf:"fixed64,35,opt,name=ChangeBUSD,proto3" json:"ChangeBUSD,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pair_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_pair_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_pair_proto_rawDescGZIP(), []int{0}
}

func (x *Pair) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Pair) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pair) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Pair) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Pair) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Pair) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Pair) GetBaseAddress() string {
	if x != nil {
		return x.BaseAddress
	}
	return ""
}

func (x *Pair) GetBaseDecimals() int32 {
	if x != nil {
		return x.BaseDecimals
	}
	return 0
}

func (x *Pair) GetQuoteAddress() string {
	if x != nil {
		return x.QuoteAddress
	}
	return ""
}

func (x *Pair) GetQuoteDecimals() int32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *Pair) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Pair) GetHot() bool {
	if x != nil {
		return x.Hot
	}
	return false
}

func (x *Pair) GetFlipped() bool {
	if x != nil {
		return x.Flipped
	}
	return false
}

func (x *Pair) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *Pair) GetKind() int32 {
	if x != nil {
		return x.Kind
	}
	return 0
}

func (x *Pair) GetPoolCreated() int64 {
	if x != nil {
		return x.PoolCreated
	}
	return 0
}

func (x *Pair) GetBaseId() uint32 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *Pair) GetQuoteId() uint32 {
	if x != nil {
		return x.QuoteId
	}
	return 0
}

func (x *Pair) GetPriceA() float64 {
	if x != nil {
		return x.PriceA
	}
	return 0
}

func (x *Pair) GetPriceAUSD() float64 {
	if x != nil {
		return x.PriceAUSD
	}
	return 0
}

func (x *Pair) GetPriceB() float64 {
	if x != nil {
		return x.PriceB
	}
	return 0
}

func (x *Pair) GetPriceBUSD() float64 {
	if x != nil {
		return x.PriceBUSD
	}
	return 0
}

func (x *Pair) GetLiquidity() float64 {
	if x != nil {
		return x.Liquidity
	}
	return 0
}

func (x *Pair) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Pair) GetBaseReserve() int64 {
	if x != nil {
		return x.BaseReserve
	}
	return 0
}

func (x *Pair) GetQuoteReserve() int64 {
	if x != nil {
		return x.QuoteReserve
	}
	return 0
}

func (x *Pair) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Pair) GetAPY() float64 {
	if x != nil {
		return x.APY
	}
	return 0
}

func (x *Pair) GetBaseSlug() string {
	if x != nil {
		return x.BaseSlug
	}
	return ""
}

func (x *Pair) GetQuoteSlug() string {
	if x != nil {
		return x.QuoteSlug
	}
	return ""
}

func (x *Pair) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Pair) GetChangeA() float64 {
	if x != nil {
		return x.ChangeA
	}
	return 0
}

func (x *Pair) GetChangeAUSD() float64 {
	if x != nil {
		return x.ChangeAUSD
	}
	return 0
}

func (x *Pair) GetChangeB() float64 {
	if x != nil {
		return x.ChangeB
	}
	return 0
}

func (x *Pair) GetChangeBUSD() float64 {
	if x != nil {
		return x.ChangeBUSD
	}
	return 0
}

var File_pair_proto protoreflect.FileDescriptor

var file_pair_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x61, 0x69, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x22, 0xbe, 0x07, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x73,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x42,
	0x61, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x48, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x48, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x46, 0x6c, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x42, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x41, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x41, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x55, 0x53, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x42, 0x55, 0x53, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x55, 0x53, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x41, 0x50, 0x59, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x41, 0x50,
	0x59, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x61, 0x73, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x55, 0x53, 0x44, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x55, 0x53, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x55, 0x53, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x42, 0x55, 0x53, 0x44, 0x42, 0x12, 0x5a, 0x10, 0x2f, 0x70, 0x6b, 0x67, 0x2d, 0x62, 0x69,
	0x6e, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_pair_proto_rawDescOnce sync.Once
	file_pair_proto_rawDescData = file_pair_proto_rawDesc
)

func file_pair_proto_rawDescGZIP() []byte {
	file_pair_proto_rawDescOnce.Do(func() {
		file_pair_proto_rawDescData = protoimpl.X.CompressGZIP(file_pair_proto_rawDescData)
	})
	return file_pair_proto_rawDescData
}

var file_pair_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_pair_proto_goTypes = []interface{}{
	(*Pair)(nil), // 0: binary.Pair
}
var file_pair_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pair_proto_init() }
func file_pair_proto_init() {
	if File_pair_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pair_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pair_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pair_proto_goTypes,
		DependencyIndexes: file_pair_proto_depIdxs,
		MessageInfos:      file_pair_proto_msgTypes,
	}.Build()
	File_pair_proto = out.File
	file_pair_proto_rawDesc = nil
	file_pair_proto_goTypes = nil
	file_pair_proto_depIdxs = nil
}
